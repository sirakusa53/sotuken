\inst setprop (Value obj, Value prop, Value val)

\when obj:array \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("setprop: %" PRIJSValue "[%" PRIJSValue "] <- %" PRIJSValue "\n",
	   obj, prop, val);
#endif /* DEBUG_GETPROP_VALUE */
  set_array_prop(context, obj, prop, val);
\}

\when (obj:regexp || obj:number_object || obj:boolean_object || obj:builtin || obj:string_object || obj:simple_object || obj:function) && prop:string \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("setprop: %" PRIJSValue "[%s] <- %" PRIJSValue "\n",
	   obj, string_to_cstr(prop), val);
#endif /* DEBUG_GETPROP_VALUE */
#ifdef INLINE_CACHE
  {
    InlineCache *ic = &(INSN_CACHE(curfn->index, pc).inl_cache);
#ifdef IC_PROF
    ic->count++;
    ic_prof_count++;
    if (ic->pm == NULL)
      ic->unavailable++;
#endif /* IC_PROF */
    if (ic->pm == object_get_shape(obj)->pm && ic->prop_name == prop) {
      assert(ic->index <
             object_get_shape(obj)->n_embedded_slots +
             object_get_shape(obj)->n_extension_slots -
             (object_get_shape(obj)->n_extension_slots > 0 ? 1 : 0));
      object_set_prop(obj, ic->index, val);
#ifdef IC_PROF
      ic->hit++;
      ic_prof_hit++;
#endif /* IC_PROF */
    } else {
      if (++ic->miss > INLINE_CACHE_RESET_THRESHOLD)
        ic->pm = NULL;
      set_prop_with_ic(context, obj, prop, val, ATTR_NONE, ic);
    }
  }
#else /* INLINE_CACHE */
  set_object_prop(context, obj, prop, val);
#endif /* INLINE_CACHE */
\}

\when (obj:regexp || obj:number_object || obj:boolean_object || obj:builtin || obj:string_object || obj:simple_object || obj:function) \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("setprop: %" PRIJSValue "[%" PRIJSValue "] <- %" PRIJSValue "\n",
	   obj, prop, val);
#endif /* DEBUG_GETPROP_VALUE */
  set_object_prop(context, obj, prop, val);
\}

\otherwise \{
  LOG_EXIT("setprop: first operand is not an object\n");
/* Local Variables:      */
/* mode: c               */
/* c-basic-offset: 2     */
/* indent-tabs-mode: nil */
/* End:                  */
\}

