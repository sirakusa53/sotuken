\inst getprop (Register dst, Value obj, Value prop)

\when obj:array && prop:fixnum \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("getprop: array (prop = fixnum(%" PRIcint "))\n", fixnum_to_cint(prop));
#endif /* DEBUG_GETPROP_VALUE */
  dst = get_array_element(context, obj, fixnum_to_cint(prop));
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag) {
    printf("getprop: ");
    print_value(context, dst, 1);
    printf("\n");
  }
#endif /* DEBUG_GETPROP_VALUE */
\}

\when obj:array \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("getprop: array (prop = %" PRIJSValue ")\n", prop);
#endif /* DEBUG_GETPROP_VALUE */
  dst = get_array_prop(context, obj, prop);
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag) {
    printf("getprop: ");
    print_value(context, dst, 1);
    printf("\n");
  }
#endif /* DEBUG_GETPROP_VALUE */
\}

\when (obj:regexp || obj:number_object || obj:boolean_object || obj:string_object || obj:builtin || obj:simple_object || obj:function) && prop:string\{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("getprop: object (prop = %s)\n", string_to_cstr(prop));
#endif /* DEBUG_GETPROP_VALUE */
#ifdef INLINE_CACHE
  {
    InlineCache *ic = &(INSN_CACHE(curfn->index, pc).inl_cache);
#ifdef IC_PROF
    ic->count++;
    ic_prof_count++;
    if (ic->pm == NULL)
      ic->unavailable++;
#endif /* IC_PROF */

#ifdef PROTO_IC
    if (ic->pm == object_get_shape(obj)->pm && ic->prop_name == prop) {
      if (ic->owner == JS_EMPTY) {
        assert(ic->index <
               object_get_shape(obj)->n_embedded_slots +
               object_get_shape(obj)->n_extension_slots -
               (object_get_shape(obj)->n_extension_slots > 0 ? 1 : 0));
        dst = object_get_prop(obj, ic->index);
        if (dst == JS_EMPTY)
          goto GETPROP_OBJECT_INLINE_CACHE_MISS;
      } else {
        if (ic->epoch < prototype_ic_epoch)
          goto GETPROP_OBJECT_INVALIDATE_INLINE_CACHE;
        else {
          JSValue owner = ic->owner;
          assert(ic->index <
                 object_get_shape(owner)->n_embedded_slots +
                 object_get_shape(owner)->n_extension_slots -
                 (object_get_shape(owner)->n_extension_slots > 0 ? 1 : 0));
          dst = object_get_prop(owner, ic->index);
          /* Deletion of prototype property should invalidate inline
           * cache. So control should not reach hare in such a case. */
          assert(dst != JS_EMPTY);
        }
      }
#ifdef IC_PROF
      ic->hit++;
      ic_prof_hit++;
#endif /* IC_PROF */
    } else {
    GETPROP_OBJECT_INLINE_CACHE_MISS:
      if (++ic->miss > INLINE_CACHE_RESET_THRESHOLD) {
      GETPROP_OBJECT_INVALIDATE_INLINE_CACHE:
        ic->pm = NULL; /* invalidate */
      }
      dst = get_object_prop(context, obj, prop, ic);
    }
#else /* PROTO_IC */
    if (ic->pm == object_get_shape(obj)->pm && ic->prop_name == prop) {
      assert(ic->index <
             object_get_shape(obj)->n_embedded_slots +
             object_get_shape(obj)->n_extension_slots -
             (object_get_shape(obj)->n_extension_slots > 0 ? 1 : 0));
      dst = object_get_prop(obj, ic->index);
      if (dst == JS_EMPTY)
        goto GETPROP_OBJECT_INLINE_CACHE_MISS;
#ifdef IC_PROF
      ic->hit++;
      ic_prof_hit++;
#endif /* IC_PROF */
    } else {
    GETPROP_OBJECT_INLINE_CACHE_MISS:      
      if (++ic->miss > INLINE_CACHE_RESET_THRESHOLD) {
        ic->pm = NULL; /* invalidate */
      }
      dst = get_object_prop(context, obj, prop, ic);
    }
#endif /* PROTO_IC */
  }
#else /* INLINE_CACHE */
  dst = get_object_prop(context, obj, prop);
#endif /* INLINE_CACHE */
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag) {
    printf("getprop: ");
    print_value(context, dst, 1);
    printf("\n");
  }
#endif /* DEBUG_GETPROP_VALUE */
\}

\when (obj:regexp || obj:number_object || obj:boolean_object || obj:string_object || obj:builtin || obj:simple_object || obj:function) \{
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag)
    printf("getprop: object (prop = %" PRIJSValue ")\n", prop);
#endif /* DEBUG_GETPROP_VALUE */
#ifdef INLINE_CACHE
  dst = get_object_prop(context, obj, prop, NULL);
#else /* INLINE_CACHE */
  dst = get_object_prop(context, obj, prop);
#endif /* INLINE_CACHE */
#ifdef DEBUG_GETPROP_VALUE
  if (trace_flag) {
    printf("getprop: ");
    print_value(context, dst, 1);
    printf("\n");
  }
#endif /* DEBUG_GETPROP_VALUE */
\}

\otherwise \{
  if (obj == JS_UNDEFINED)
     LOG_EXIT("GETPROP: attempt to get property of `undefined'\n");
  GC_PUSH(prop);
  obj = to_object(context, obj);
  GC_POP(prop);
  goto USELABEL(HEAD);
/* Local Variables:      */
/* mode: c               */
/* c-basic-offset: 2     */
/* indent-tabs-mode: nil */
/* End:                  */
\}

