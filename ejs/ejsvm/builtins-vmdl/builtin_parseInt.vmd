#include "../header-vmdl/patterns.vmdh"
#include "../header-vmdl/externc.vmdh"

(needContext, triggerGC, builtinFunction) builtin_parseInt: (JSValue, JSValue, JSValue) -> JSValue 
builtin_parseInt(global, string, radix){
    JSValue str0 = (na >= 1) ? string : gconsts.g_string_empty;
    JSValue rad0 = (na >= 2) ? radix : JS_UNDEFINED;

    JSValue str = to_string(str0);
    match(str){
        case(String str){
            cstring cstr = string_to_cstr(str);
            int32_t irad;
            if(rad0 == JS_UNDEFINED)
                irad <- PARSE_INT_RADIX_AUTO;
            else{
                JSValue rad = to_number(rad0);
                if(is_undefined(rad))
                    irad <- PARSE_INT_RADIX_AUTO;
                else{
                    match(rad){
                        case(Number rad){
                            irad <- cint_to_int32(number_to_cint(rad));
                            if(irad == 0)
                                irad <- PARSE_INT_RADIX_AUTO;
                            else if (irad < 2 || irad > 36)
                                return gconsts.g_flonum_nan;
                        }
                        case(true){
                            irad <- 10;
                        }
                    }
                }
            }
            JSValue ret = cstr_parse_int(cstr, int32_to_cint(irad));
            return ret;
        }
        case(true){
            return gconsts.g_flonum_nan;
        }
    }
}