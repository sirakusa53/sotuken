#include "../header-vmdl/patterns.vmdh"
#include "../header-vmdl/externc.vmdh"

(needContext, triggerGC, builtinFunction) array_filter : (Array, callable, JSValue) -> JSValue 
array_filter(o, callbackfn, thisArg){
  /* 2. 3. */
  int len = number_to_cint(get_jsarray_length(o));
  /* 5. */
  JSValue t = na >= 2 ? thisArg : JS_UNDEFINED;
  /* 6. */
  JSValue a = new_array_object(DEBUG_NAME("array_filter"), gshapes.g_shape_Array, len);
  /* 7. */
  int k = 0;
  /* 8. */
  int to_ = 0;
  /* 9. */
  while(k < len){
    /* b. */
    if(has_array_element(o, k)){
      /* c. */
      /* i. */
      JSValue js_k = cint_to_number(k);
      JSValue k_value = get_array_element(o, k);
      /* ii. */
      JSValue selected;
      match(callbackfn){
        case(Function callbackfn){
          selected <- send_function3(t, callbackfn, k_value, js_k, o);
        }
        case(Builtin callbackfn){
          selected <- send_builtin3(t, callbackfn, k_value, js_k, o);
        }
      }
      /* iii. */
      if(selected == JS_TRUE || (selected != JS_FALSE && to_boolean(selected) == JS_TRUE)){
        set_array_element(a, to_, k_value);
        to_ <- to_ + 1;
      }
    }
    /* d. */
    k <- k + 1;
  }
  set_jsarray_length(a, cint_to_number(to_));
  /* 10. */
  return a;
}
