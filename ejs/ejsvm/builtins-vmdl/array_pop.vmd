#include "../header-vmdl/patterns.vmdh"
#include "../header-vmdl/externc.vmdh"

(needContext, triggerGC, builtinFunction) array_pop: JSValue -> JSValue 
array_pop(arrName){
  JSValue ret;

  match(arrName){
    case(Array arrName){
      int len = to_cint(get_jsarray_length(arrName)) - 1;    /* len >= -1 */
      if (len < 0) {
        return JS_UNDEFINED;
      }
      
      JSValue flen = cint_to_number(len);
      if (cint_to_uintjsv_t(len) < get_jsarray_size(arrName)) {
        JSValue[] body = get_jsarray_body(arrName);
        ret <- body[len];
      } else
        ret <- get_prop_prototype_chain(arrName, to_string(flen));
      delete_array_element(arrName, len);
      /* This is a bug. */
      // set_jsarray_length(arrName, len);
      set_jsarray_length(arrName, flen);
      /* NOTE: 'ret' is the target of GC_PUSH/GC_POP here. */
      set_prop_direct(arrName, gconsts.g_string_length, flen, ATTR_NONE);
    }
    case(true){
      ret <- JS_EMPTY;
      LOG_EXIT("type error: array_pop");
    }
  }
  return ret;
}
