#include "../header-vmdl/patterns.vmdh"

#include "../header-vmdl/externc.vmdh"

(vmInstruction, needContext)
lessthanequal : (JSValue, JSValue) -> Special

lessthanequal (v1, v2) {
  top: match (v1, v2) {
    case (Fixnum v1 && Fixnum v2) {
      return true_false(fixnum_to_intjsv_t(v1) <= fixnum_to_intjsv_t(v2));
    }
    case (number v1 && number v2) {
      double x1 = to_double(v1);
      double x2 = to_double(v2);
      return x1 <= x2 ? JS_TRUE : JS_FALSE;
    }
    case (String v1 && String v2) {
      return strcmp(string_to_cstr(v1), string_to_cstr(v2)) <= 0 ? JS_TRUE : JS_FALSE;
    }
    case ((String v1 || Special v1) && (String v2 || Special v2)) {
      Number u1 = to_number(v1);
      Number u2 = to_number(v2);
      rematch top (u1, u2);
    }
    case ((String v1 || Special v1) && number v2) {
      Number u1 = to_number(v1);
      rematch top (u1, v2);
    }
    case (number v1 && (String v2 || Special v2)) {
      Number u2 = to_number(v2);
      rematch top (v1, u2);
    }
    case (object v1 && ffss v2) {
      JSValue u1 = Object_to_primitive_hint_number(v1);
      rematch top (u1, v2);
    }
    case (ffss v1 && object v2) {
      JSValue u2 = Object_to_primitive_hint_number(v2);
      rematch top (v1, u2);
    }
    case (true) {
      JSValue u1 = Object_to_primitive_hint_number(v1);
      JSValue u2 = Object_to_primitive_hint_number(v2);
      rematch top (u1, u2);
    }
  }
}