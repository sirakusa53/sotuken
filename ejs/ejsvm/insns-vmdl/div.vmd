#include "../header-vmdl/patterns.vmdh"

#include "../header-vmdl/externc.vmdh"

(vmInstruction, needContext, triggerGC, tailCall)
div : (JSValue, JSValue) -> JSValue
div (v1, v2) {
  top: match (v1, v2) {
    case (Fixnum v1 && Fixnum v2) {
      int n1 = to_cint(v1);
      if (IsFixnumZero(v2)) {
          if (n1 > 0) {
              return gconsts.g_flonum_infinity;
          } else if (n1 == 0) {
              return gconsts.g_flonum_nan;
          } else {
              return gconsts.g_flonum_negative_infinity;
          }
      } else {
        int n2 = to_cint(v2);
        int s = n1 / n2;
        return (n1 == n2 * s) ? cint_to_number(s) : double_to_flonum(to_double(v1) / to_double(v2));
      }
    }
    case (Fixnum v1 && Flonum v2 || Flonum v1 && Fixnum v2 || Flonum v1 && Flonum v2) {
      double x1 = to_double(v1);
      double x2 = to_double(v2);
      double d = x1 / x2;
      if (IsFlonumInfinity(double_to_flonum(d))) {
          return d > 0.0 ? gconsts.g_flonum_infinity : gconsts.g_flonum_negative_infinity;
      } else if (IsFlonumNan(double_to_flonum(d))) {
          return gconsts.g_flonum_nan;
      } else {
          return double_to_number(d);
      }
    }
    case (number v1) {
        Number u2 = to_number(v2);
        rematch top(v1, u2);
    }
    case (number v2) {
        Number u1 = to_number(v1);
        rematch top(u1, v2);
    }
    case (true) {
      Number u1 = to_number(v1);
      Number u2 = to_number(v2);
      rematch top(u1, u2);
    }
  }
}