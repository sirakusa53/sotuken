#include "../header-vmdl/patterns.vmdh"

#include "../header-vmdl/externc.vmdh"


(needContext, makeInline, calledFromC) object_to_string : JSObject -> String
object_to_string(v){
    JSValue f1 = get_prop_prototype_chain(v, gconsts.g_string_tostring);
    if(f1 != JS_UNDEFINED){
        match(f1){
            case(callable f1){
                JSValue invoked;
                match(f1){
                    case(Function f1){
                        invoked <- invoke_function0(v, f1, true);
                    }
                    case(Builtin f1){
                        invoked <- invoke_builtin0(v, f1, true);
                    }
                }
                match(invoked){
                    case(String invoked){
                        return invoked;
                    }
                    case(Fixnum invoked){
                        return fixnum_to_string(invoked);
                    }
                    case(Flonum invoked){
                        return flonum_to_string(invoked);
                    }
                    case(Special invoked){
                        return special_to_string(invoked);
                    }
                }
            }
        }
    }
    JSValue f2 = get_prop_prototype_chain(v, gconsts.g_string_valueof);
    if(f2 != JS_UNDEFINED){
        match(f2){
            case(callable f2){
                JSValue invoked;
                match(f2){
                    case(Function f2){
                        invoked <- invoke_function0(v, f2, true);
                    }
                    case(Builtin f2){
                        invoked <- invoke_builtin0(v, f2, true);
                    }
                }
                match(invoked){
                    case(String invoked){
                        return invoked;
                    }
                    case(Fixnum invoked){
                        return fixnum_to_string(invoked);
                    }
                    case(Flonum invoked){
                        return flonum_to_string(invoked);
                    }
                    case(Special invoked){
                        return special_to_string(invoked);
                    }
                }
            }
        }
    }
    type_error_exception("neither to_string nor valueOf returned a string in object_to_string");
    return gconsts.g_string_undefined;     /* not reached */
}