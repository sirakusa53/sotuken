#define dst regbase[r0]

DEFLABEL(HEAD): __attribute__((unused));
INSN_COUNT2(rightshift,v1,v2);Lrightshift0: __attribute__((unused));
TLrightshift_flonum_any: __attribute__((unused));
TLrightshift_array_any: __attribute__((unused));
TLrightshift_any_any: __attribute__((unused));
TLrightshift_fixnum_any: __attribute__((unused));
TLrightshift_string_any: __attribute__((unused));
TLrightshift_builtin_any: __attribute__((unused));
TLrightshift_number_object_any: __attribute__((unused));
TLrightshift_boolean_object_any: __attribute__((unused));
TLrightshift_simple_object_any: __attribute__((unused));
TLrightshift_regexp_any: __attribute__((unused));
TLrightshift_function_any: __attribute__((unused));
TLrightshift_string_object_any: __attribute__((unused));
TLrightshift_special_any: __attribute__((unused));
TLrightshift_iterator_any: __attribute__((unused));
switch((unsigned int) get_ptag(v2).v){ // vmgen.newsynth.DecisionDiagram$PTNode@550(3)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lrightshift1: __attribute__((unused));
TLrightshift_any_array: __attribute__((unused));
TLrightshift_any_boolean_object: __attribute__((unused));
TLrightshift_any_simple_object: __attribute__((unused));
TLrightshift_any_builtin: __attribute__((unused));
TLrightshift_any_function: __attribute__((unused));
TLrightshift_any_string_object: __attribute__((unused));
TLrightshift_any_special: __attribute__((unused));
TLrightshift_any_string: __attribute__((unused));
TLrightshift_any_regexp: __attribute__((unused));
TLrightshift_any_iterator: __attribute__((unused));
TLrightshift_any_number_object: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@5f3(2)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lrightshift2: __attribute__((unused));
TLrightshift_string_simple_object: __attribute__((unused));
TLrightshift_simple_object_special: __attribute__((unused));
TLrightshift_special_special: __attribute__((unused));
TLrightshift_boolean_object_regexp: __attribute__((unused));
TLrightshift_simple_object_string: __attribute__((unused));
TLrightshift_boolean_object_special: __attribute__((unused));
TLrightshift_boolean_object_simple_object: __attribute__((unused));
TLrightshift_string_object_iterator: __attribute__((unused));
TLrightshift_array_number_object: __attribute__((unused));
TLrightshift_builtin_string: __attribute__((unused));
TLrightshift_function_function: __attribute__((unused));
TLrightshift_special_iterator: __attribute__((unused));
TLrightshift_iterator_number_object: __attribute__((unused));
TLrightshift_special_builtin: __attribute__((unused));
TLrightshift_special_string_object: __attribute__((unused));
TLrightshift_builtin_array: __attribute__((unused));
TLrightshift_string_object_special: __attribute__((unused));
TLrightshift_array_builtin: __attribute__((unused));
TLrightshift_iterator_simple_object: __attribute__((unused));
TLrightshift_string_object_array: __attribute__((unused));
TLrightshift_boolean_object_boolean_object: __attribute__((unused));
TLrightshift_string_object_number_object: __attribute__((unused));
TLrightshift_array_regexp: __attribute__((unused));
TLrightshift_boolean_object_builtin: __attribute__((unused));
TLrightshift_string_object_boolean_object: __attribute__((unused));
TLrightshift_array_function: __attribute__((unused));
TLrightshift_simple_object_function: __attribute__((unused));
TLrightshift_regexp_simple_object: __attribute__((unused));
TLrightshift_regexp_regexp: __attribute__((unused));
TLrightshift_special_regexp: __attribute__((unused));
TLrightshift_builtin_simple_object: __attribute__((unused));
TLrightshift_number_object_array: __attribute__((unused));
TLrightshift_function_string: __attribute__((unused));
TLrightshift_builtin_iterator: __attribute__((unused));
TLrightshift_boolean_object_number_object: __attribute__((unused));
TLrightshift_simple_object_iterator: __attribute__((unused));
TLrightshift_iterator_iterator: __attribute__((unused));
TLrightshift_regexp_iterator: __attribute__((unused));
TLrightshift_string_object_string: __attribute__((unused));
TLrightshift_number_object_boolean_object: __attribute__((unused));
TLrightshift_number_object_simple_object: __attribute__((unused));
TLrightshift_iterator_string: __attribute__((unused));
TLrightshift_string_object_simple_object: __attribute__((unused));
TLrightshift_function_string_object: __attribute__((unused));
TLrightshift_simple_object_array: __attribute__((unused));
TLrightshift_number_object_regexp: __attribute__((unused));
TLrightshift_function_builtin: __attribute__((unused));
TLrightshift_array_string_object: __attribute__((unused));
TLrightshift_function_number_object: __attribute__((unused));
TLrightshift_string_string: __attribute__((unused));
TLrightshift_string_object_function: __attribute__((unused));
TLrightshift_iterator_array: __attribute__((unused));
TLrightshift_regexp_number_object: __attribute__((unused));
TLrightshift_regexp_function: __attribute__((unused));
TLrightshift_function_boolean_object: __attribute__((unused));
TLrightshift_array_iterator: __attribute__((unused));
TLrightshift_iterator_function: __attribute__((unused));
TLrightshift_number_object_special: __attribute__((unused));
TLrightshift_boolean_object_array: __attribute__((unused));
TLrightshift_string_builtin: __attribute__((unused));
TLrightshift_number_object_builtin: __attribute__((unused));
TLrightshift_string_object_string_object: __attribute__((unused));
TLrightshift_function_simple_object: __attribute__((unused));
TLrightshift_regexp_array: __attribute__((unused));
TLrightshift_number_object_string_object: __attribute__((unused));
TLrightshift_array_special: __attribute__((unused));
TLrightshift_simple_object_number_object: __attribute__((unused));
TLrightshift_array_simple_object: __attribute__((unused));
TLrightshift_simple_object_builtin: __attribute__((unused));
TLrightshift_regexp_string: __attribute__((unused));
TLrightshift_simple_object_boolean_object: __attribute__((unused));
TLrightshift_builtin_string_object: __attribute__((unused));
TLrightshift_number_object_function: __attribute__((unused));
TLrightshift_regexp_boolean_object: __attribute__((unused));
TLrightshift_regexp_string_object: __attribute__((unused));
TLrightshift_builtin_boolean_object: __attribute__((unused));
TLrightshift_string_boolean_object: __attribute__((unused));
TLrightshift_array_array: __attribute__((unused));
TLrightshift_string_special: __attribute__((unused));
TLrightshift_iterator_boolean_object: __attribute__((unused));
TLrightshift_boolean_object_function: __attribute__((unused));
TLrightshift_special_function: __attribute__((unused));
TLrightshift_simple_object_regexp: __attribute__((unused));
TLrightshift_special_boolean_object: __attribute__((unused));
TLrightshift_builtin_number_object: __attribute__((unused));
TLrightshift_iterator_builtin: __attribute__((unused));
TLrightshift_builtin_builtin: __attribute__((unused));
TLrightshift_function_iterator: __attribute__((unused));
TLrightshift_function_special: __attribute__((unused));
TLrightshift_array_string: __attribute__((unused));
TLrightshift_simple_object_simple_object: __attribute__((unused));
TLrightshift_boolean_object_string_object: __attribute__((unused));
TLrightshift_special_string: __attribute__((unused));
TLrightshift_iterator_special: __attribute__((unused));
TLrightshift_number_object_number_object: __attribute__((unused));
TLrightshift_builtin_regexp: __attribute__((unused));
TLrightshift_string_function: __attribute__((unused));
TLrightshift_special_array: __attribute__((unused));
TLrightshift_boolean_object_string: __attribute__((unused));
TLrightshift_function_regexp: __attribute__((unused));
TLrightshift_iterator_string_object: __attribute__((unused));
TLrightshift_string_number_object: __attribute__((unused));
TLrightshift_simple_object_string_object: __attribute__((unused));
TLrightshift_iterator_regexp: __attribute__((unused));
TLrightshift_special_number_object: __attribute__((unused));
TLrightshift_builtin_special: __attribute__((unused));
TLrightshift_string_object_regexp: __attribute__((unused));
TLrightshift_boolean_object_iterator: __attribute__((unused));
TLrightshift_string_string_object: __attribute__((unused));
TLrightshift_function_array: __attribute__((unused));
TLrightshift_special_simple_object: __attribute__((unused));
TLrightshift_regexp_builtin: __attribute__((unused));
TLrightshift_array_boolean_object: __attribute__((unused));
TLrightshift_regexp_special: __attribute__((unused));
TLrightshift_number_object_iterator: __attribute__((unused));
TLrightshift_string_object_builtin: __attribute__((unused));
TLrightshift_number_object_string: __attribute__((unused));
TLrightshift_string_regexp: __attribute__((unused));
TLrightshift_string_array: __attribute__((unused));
TLrightshift_builtin_function: __attribute__((unused));
TLrightshift_string_iterator: __attribute__((unused));
{ // normal_array normal_special vmgen.newsynth.DecisionDiagram$Leaf@16

  v1 = to_number(context, v1);
  if (v1 == gconsts.g_flonum_infinity ||
      v1 == gconsts.g_flonum_negative_infinity ||
      v1 == gconsts.g_flonum_nan) {
    v1 = FIXNUM_ZERO;
  }
  v2 = to_number(context, v2);
  goto USELABEL(HEAD);
}
break;
case TV_FLONUM:
case TV_FIXNUM:
default:
Lrightshift3: __attribute__((unused));
TLrightshift_fixnum_special: __attribute__((unused));
TLrightshift_flonum_iterator: __attribute__((unused));
TLrightshift_flonum_boolean_object: __attribute__((unused));
TLrightshift_flonum_array: __attribute__((unused));
TLrightshift_fixnum_string: __attribute__((unused));
TLrightshift_fixnum_function: __attribute__((unused));
TLrightshift_flonum_function: __attribute__((unused));
TLrightshift_flonum_simple_object: __attribute__((unused));
TLrightshift_fixnum_regexp: __attribute__((unused));
TLrightshift_flonum_string_object: __attribute__((unused));
TLrightshift_flonum_builtin: __attribute__((unused));
TLrightshift_fixnum_builtin: __attribute__((unused));
TLrightshift_flonum_regexp: __attribute__((unused));
TLrightshift_fixnum_iterator: __attribute__((unused));
TLrightshift_fixnum_string_object: __attribute__((unused));
TLrightshift_flonum_number_object: __attribute__((unused));
TLrightshift_flonum_string: __attribute__((unused));
TLrightshift_fixnum_number_object: __attribute__((unused));
TLrightshift_fixnum_simple_object: __attribute__((unused));
TLrightshift_fixnum_boolean_object: __attribute__((unused));
TLrightshift_flonum_special: __attribute__((unused));
TLrightshift_fixnum_array: __attribute__((unused));
{ // normal_flonum normal_special vmgen.newsynth.DecisionDiagram$Leaf@54

  v2 = to_number(context, v2);
  goto USELABEL(HEAD);
}
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@5f3
break;
case TV_FLONUM:
Lrightshift4: __attribute__((unused));
TLrightshift_any_flonum: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@e6b(3)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lrightshift5: __attribute__((unused));
TLrightshift_special_flonum: __attribute__((unused));
TLrightshift_iterator_flonum: __attribute__((unused));
TLrightshift_function_fixnum: __attribute__((unused));
TLrightshift_builtin_flonum: __attribute__((unused));
TLrightshift_number_object_flonum: __attribute__((unused));
TLrightshift_special_fixnum: __attribute__((unused));
TLrightshift_array_flonum: __attribute__((unused));
TLrightshift_function_flonum: __attribute__((unused));
TLrightshift_number_object_fixnum: __attribute__((unused));
TLrightshift_string_flonum: __attribute__((unused));
TLrightshift_regexp_fixnum: __attribute__((unused));
TLrightshift_string_object_fixnum: __attribute__((unused));
TLrightshift_builtin_fixnum: __attribute__((unused));
TLrightshift_boolean_object_flonum: __attribute__((unused));
TLrightshift_regexp_flonum: __attribute__((unused));
TLrightshift_simple_object_fixnum: __attribute__((unused));
TLrightshift_string_fixnum: __attribute__((unused));
TLrightshift_boolean_object_fixnum: __attribute__((unused));
TLrightshift_iterator_fixnum: __attribute__((unused));
TLrightshift_simple_object_flonum: __attribute__((unused));
TLrightshift_array_fixnum: __attribute__((unused));
TLrightshift_string_object_flonum: __attribute__((unused));
{ // normal_builtin normal_flonum vmgen.newsynth.DecisionDiagram$Leaf@f3

  v1 = to_number(context, v1);
  if (v1 == gconsts.g_flonum_infinity ||
      v1 == gconsts.g_flonum_negative_infinity ||
      v1 == gconsts.g_flonum_nan) {
    v1 = FIXNUM_ZERO;
  }
  goto USELABEL(HEAD);
}
break;
case TV_FIXNUM:
default:
Lrightshift6: __attribute__((unused));
TLrightshift_fixnum_flonum: __attribute__((unused));
{ // normal_fixnum normal_flonum vmgen.newsynth.DecisionDiagram$Leaf@840

  int32_t x1 = (int32_t) fixnum_to_cint(v1);
  cint x2 = flonum_to_cint(v2) & 31;
  dst = small_cint_to_fixnum((cint) (x1 >> x2));
}
break;
case TV_FLONUM:
Lrightshift7: __attribute__((unused));
TLrightshift_flonum_flonum: __attribute__((unused));
{ // normal_flonum normal_flonum vmgen.newsynth.DecisionDiagram$Leaf@a53

  int32_t x1 = (int32_t) flonum_to_cint(v1);
  cint x2 = flonum_to_cint(v2) & 31;
  dst = int32_to_number(context, x1 >> x2);
}
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@e6b
break;
case TV_FIXNUM:
default:
Lrightshift8: __attribute__((unused));
TLrightshift_any_fixnum: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@1f02(3)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
goto Lrightshift5;
break;
case TV_FLONUM:
Lrightshift9: __attribute__((unused));
TLrightshift_flonum_fixnum: __attribute__((unused));
{ // normal_flonum normal_fixnum vmgen.newsynth.DecisionDiagram$Leaf@4ae

  int32_t x1 = (int32_t) flonum_to_cint(v1);
  cint x2 = fixnum_to_cint(v2) & 31;
  dst = int32_to_number(context, x1 >> x2);
}
break;
case TV_FIXNUM:
default:
Lrightshift10: __attribute__((unused));
TLrightshift_fixnum_fixnum: __attribute__((unused));
{ // normal_fixnum normal_fixnum vmgen.newsynth.DecisionDiagram$Leaf@947

  int32_t x1 = (int32_t) fixnum_to_cint(v1);
  cint x2 = fixnum_to_cint(v2) & 31;
  dst = small_cint_to_fixnum((cint) (x1 >> x2));
}
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@1f02
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@550
#undef dst

