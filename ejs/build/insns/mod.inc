#define dst regbase[r0]

DEFLABEL(HEAD): __attribute__((unused));
INSN_COUNT2(mod,v1,v2);Lmod0: __attribute__((unused));
TLmod_flonum_any: __attribute__((unused));
TLmod_builtin_any: __attribute__((unused));
TLmod_iterator_any: __attribute__((unused));
TLmod_function_any: __attribute__((unused));
TLmod_string_object_any: __attribute__((unused));
TLmod_regexp_any: __attribute__((unused));
TLmod_array_any: __attribute__((unused));
TLmod_any_any: __attribute__((unused));
TLmod_simple_object_any: __attribute__((unused));
TLmod_string_any: __attribute__((unused));
TLmod_boolean_object_any: __attribute__((unused));
TLmod_number_object_any: __attribute__((unused));
TLmod_special_any: __attribute__((unused));
TLmod_fixnum_any: __attribute__((unused));
switch((unsigned int) get_ptag(v2).v){ // vmgen.newsynth.DecisionDiagram$PTNode@550(3)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lmod1: __attribute__((unused));
TLmod_any_special: __attribute__((unused));
TLmod_any_string: __attribute__((unused));
TLmod_any_iterator: __attribute__((unused));
TLmod_any_string_object: __attribute__((unused));
TLmod_any_builtin: __attribute__((unused));
TLmod_any_simple_object: __attribute__((unused));
TLmod_any_array: __attribute__((unused));
TLmod_any_function: __attribute__((unused));
TLmod_any_number_object: __attribute__((unused));
TLmod_any_regexp: __attribute__((unused));
TLmod_any_boolean_object: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@17c(2)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lmod2: __attribute__((unused));
TLmod_simple_object_number_object: __attribute__((unused));
TLmod_builtin_builtin: __attribute__((unused));
TLmod_string_array: __attribute__((unused));
TLmod_number_object_string_object: __attribute__((unused));
TLmod_regexp_string_object: __attribute__((unused));
TLmod_boolean_object_simple_object: __attribute__((unused));
TLmod_simple_object_regexp: __attribute__((unused));
TLmod_array_string_object: __attribute__((unused));
TLmod_simple_object_function: __attribute__((unused));
TLmod_number_object_iterator: __attribute__((unused));
TLmod_boolean_object_builtin: __attribute__((unused));
TLmod_string_function: __attribute__((unused));
TLmod_builtin_number_object: __attribute__((unused));
TLmod_string_object_simple_object: __attribute__((unused));
TLmod_simple_object_array: __attribute__((unused));
TLmod_builtin_simple_object: __attribute__((unused));
TLmod_regexp_iterator: __attribute__((unused));
TLmod_builtin_string: __attribute__((unused));
TLmod_number_object_array: __attribute__((unused));
TLmod_string_string_object: __attribute__((unused));
TLmod_array_string: __attribute__((unused));
TLmod_special_array: __attribute__((unused));
TLmod_regexp_boolean_object: __attribute__((unused));
TLmod_special_iterator: __attribute__((unused));
TLmod_number_object_string: __attribute__((unused));
TLmod_iterator_array: __attribute__((unused));
TLmod_builtin_special: __attribute__((unused));
TLmod_function_simple_object: __attribute__((unused));
TLmod_boolean_object_string: __attribute__((unused));
TLmod_string_object_array: __attribute__((unused));
TLmod_function_boolean_object: __attribute__((unused));
TLmod_builtin_iterator: __attribute__((unused));
TLmod_iterator_function: __attribute__((unused));
TLmod_boolean_object_iterator: __attribute__((unused));
TLmod_boolean_object_regexp: __attribute__((unused));
TLmod_regexp_function: __attribute__((unused));
TLmod_special_regexp: __attribute__((unused));
TLmod_simple_object_simple_object: __attribute__((unused));
TLmod_number_object_regexp: __attribute__((unused));
TLmod_string_object_function: __attribute__((unused));
TLmod_string_object_boolean_object: __attribute__((unused));
TLmod_string_builtin: __attribute__((unused));
TLmod_iterator_number_object: __attribute__((unused));
TLmod_function_builtin: __attribute__((unused));
TLmod_regexp_string: __attribute__((unused));
TLmod_string_object_special: __attribute__((unused));
TLmod_iterator_string_object: __attribute__((unused));
TLmod_special_string_object: __attribute__((unused));
TLmod_simple_object_string_object: __attribute__((unused));
TLmod_string_object_builtin: __attribute__((unused));
TLmod_array_special: __attribute__((unused));
TLmod_array_array: __attribute__((unused));
TLmod_array_function: __attribute__((unused));
TLmod_boolean_object_number_object: __attribute__((unused));
TLmod_special_special: __attribute__((unused));
TLmod_function_function: __attribute__((unused));
TLmod_number_object_boolean_object: __attribute__((unused));
TLmod_builtin_array: __attribute__((unused));
TLmod_string_special: __attribute__((unused));
TLmod_array_builtin: __attribute__((unused));
TLmod_iterator_simple_object: __attribute__((unused));
TLmod_special_builtin: __attribute__((unused));
TLmod_iterator_boolean_object: __attribute__((unused));
TLmod_special_simple_object: __attribute__((unused));
TLmod_function_special: __attribute__((unused));
TLmod_iterator_string: __attribute__((unused));
TLmod_string_simple_object: __attribute__((unused));
TLmod_iterator_special: __attribute__((unused));
TLmod_special_function: __attribute__((unused));
TLmod_iterator_regexp: __attribute__((unused));
TLmod_regexp_array: __attribute__((unused));
TLmod_iterator_builtin: __attribute__((unused));
TLmod_special_number_object: __attribute__((unused));
TLmod_array_boolean_object: __attribute__((unused));
TLmod_array_iterator: __attribute__((unused));
TLmod_function_string_object: __attribute__((unused));
TLmod_builtin_regexp: __attribute__((unused));
TLmod_function_string: __attribute__((unused));
TLmod_number_object_function: __attribute__((unused));
TLmod_simple_object_boolean_object: __attribute__((unused));
TLmod_builtin_boolean_object: __attribute__((unused));
TLmod_boolean_object_function: __attribute__((unused));
TLmod_builtin_function: __attribute__((unused));
TLmod_string_string: __attribute__((unused));
TLmod_number_object_simple_object: __attribute__((unused));
TLmod_boolean_object_string_object: __attribute__((unused));
TLmod_boolean_object_boolean_object: __attribute__((unused));
TLmod_simple_object_string: __attribute__((unused));
TLmod_string_object_string: __attribute__((unused));
TLmod_string_object_string_object: __attribute__((unused));
TLmod_array_regexp: __attribute__((unused));
TLmod_boolean_object_array: __attribute__((unused));
TLmod_function_iterator: __attribute__((unused));
TLmod_builtin_string_object: __attribute__((unused));
TLmod_function_number_object: __attribute__((unused));
TLmod_function_array: __attribute__((unused));
TLmod_regexp_builtin: __attribute__((unused));
TLmod_string_boolean_object: __attribute__((unused));
TLmod_string_number_object: __attribute__((unused));
TLmod_number_object_builtin: __attribute__((unused));
TLmod_special_string: __attribute__((unused));
TLmod_regexp_regexp: __attribute__((unused));
TLmod_simple_object_iterator: __attribute__((unused));
TLmod_string_object_regexp: __attribute__((unused));
TLmod_regexp_number_object: __attribute__((unused));
TLmod_iterator_iterator: __attribute__((unused));
TLmod_string_regexp: __attribute__((unused));
TLmod_simple_object_special: __attribute__((unused));
TLmod_array_number_object: __attribute__((unused));
TLmod_string_iterator: __attribute__((unused));
TLmod_number_object_special: __attribute__((unused));
TLmod_function_regexp: __attribute__((unused));
TLmod_regexp_special: __attribute__((unused));
TLmod_regexp_simple_object: __attribute__((unused));
TLmod_string_object_iterator: __attribute__((unused));
TLmod_special_boolean_object: __attribute__((unused));
TLmod_array_simple_object: __attribute__((unused));
TLmod_string_object_number_object: __attribute__((unused));
TLmod_number_object_number_object: __attribute__((unused));
TLmod_boolean_object_special: __attribute__((unused));
TLmod_simple_object_builtin: __attribute__((unused));
{ // normal_builtin normal_regexp vmgen.newsynth.DecisionDiagram$Leaf@16

  v1 = to_number(context, v1);
  v2 = to_number(context, v2);
  goto USELABEL(HEAD);
}
break;
case TV_FLONUM:
case TV_FIXNUM:
default:
Lmod3: __attribute__((unused));
TLmod_flonum_iterator: __attribute__((unused));
TLmod_fixnum_function: __attribute__((unused));
TLmod_flonum_string_object: __attribute__((unused));
TLmod_fixnum_iterator: __attribute__((unused));
TLmod_flonum_array: __attribute__((unused));
TLmod_fixnum_builtin: __attribute__((unused));
TLmod_fixnum_array: __attribute__((unused));
TLmod_flonum_number_object: __attribute__((unused));
TLmod_flonum_simple_object: __attribute__((unused));
TLmod_fixnum_regexp: __attribute__((unused));
TLmod_fixnum_string_object: __attribute__((unused));
TLmod_fixnum_string: __attribute__((unused));
TLmod_fixnum_special: __attribute__((unused));
TLmod_flonum_string: __attribute__((unused));
TLmod_fixnum_simple_object: __attribute__((unused));
TLmod_flonum_function: __attribute__((unused));
TLmod_fixnum_number_object: __attribute__((unused));
TLmod_flonum_boolean_object: __attribute__((unused));
TLmod_flonum_builtin: __attribute__((unused));
TLmod_flonum_special: __attribute__((unused));
TLmod_fixnum_boolean_object: __attribute__((unused));
TLmod_flonum_regexp: __attribute__((unused));
{ // normal_fixnum normal_string vmgen.newsynth.DecisionDiagram$Leaf@222

  v2 = to_number(context, v2);
  goto USELABEL(HEAD);
}
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@17c
break;
case TV_FLONUM:
Lmod4: __attribute__((unused));
TLmod_any_flonum: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@173c(2)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
Lmod5: __attribute__((unused));
TLmod_boolean_object_fixnum: __attribute__((unused));
TLmod_string_flonum: __attribute__((unused));
TLmod_array_fixnum: __attribute__((unused));
TLmod_function_flonum: __attribute__((unused));
TLmod_string_fixnum: __attribute__((unused));
TLmod_special_fixnum: __attribute__((unused));
TLmod_function_fixnum: __attribute__((unused));
TLmod_regexp_flonum: __attribute__((unused));
TLmod_iterator_flonum: __attribute__((unused));
TLmod_boolean_object_flonum: __attribute__((unused));
TLmod_number_object_flonum: __attribute__((unused));
TLmod_builtin_fixnum: __attribute__((unused));
TLmod_simple_object_fixnum: __attribute__((unused));
TLmod_string_object_fixnum: __attribute__((unused));
TLmod_regexp_fixnum: __attribute__((unused));
TLmod_string_object_flonum: __attribute__((unused));
TLmod_iterator_fixnum: __attribute__((unused));
TLmod_special_flonum: __attribute__((unused));
TLmod_number_object_fixnum: __attribute__((unused));
TLmod_simple_object_flonum: __attribute__((unused));
TLmod_array_flonum: __attribute__((unused));
TLmod_builtin_flonum: __attribute__((unused));
{ // normal_regexp normal_flonum vmgen.newsynth.DecisionDiagram$Leaf@df

  v1 = to_number(context, v1);
  goto USELABEL(HEAD);
}
break;
case TV_FLONUM:
case TV_FIXNUM:
default:
Lmod6: __attribute__((unused));
TLmod_fixnum_flonum: __attribute__((unused));
TLmod_flonum_flonum: __attribute__((unused));
TLmod_flonum_fixnum: __attribute__((unused));
{ // normal_flonum normal_fixnum vmgen.newsynth.DecisionDiagram$Leaf@13e8

  double x1 = to_double(context, v1);
  double x2 = to_double(context, v2);
  double d;
  if (isinf(x1) || x2 == 0.0f)
    dst = gconsts.g_flonum_nan;
  else {
    d = x1 / x2;
    d = d >= 0? floor(d) : ceil(d);
    d = x1 - (d * x2);
    dst = double_to_number(context, d);
  }
}
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@173c
break;
case TV_FIXNUM:
default:
Lmod7: __attribute__((unused));
TLmod_any_fixnum: __attribute__((unused));
switch((unsigned int) get_ptag(v1).v){ // vmgen.newsynth.DecisionDiagram$PTNode@220f(3)
case TV_STRING:
case 3:
case 2:
case 1:
case TV_SPECIAL:
case TV_GENERIC:
goto Lmod5;
break;
case TV_FIXNUM:
default:
Lmod8: __attribute__((unused));
TLmod_fixnum_fixnum: __attribute__((unused));
{ // normal_fixnum normal_fixnum vmgen.newsynth.DecisionDiagram$Leaf@a53

  if (v2 == FIXNUM_ZERO)
    dst = gconsts.g_flonum_nan;
  else {
    cint s = fixnum_to_cint(v1) % fixnum_to_cint(v2);
    dst = cint_to_number(context, s);
  }
}
break;
case TV_FLONUM:
goto Lmod6;
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@220f
break;
} // vmgen.newsynth.DecisionDiagram$PTNode@550
#undef dst

