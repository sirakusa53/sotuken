# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'benchmark.data'

runs:
  max_invocation_time: 1800
  min_iteration_time:  0     # added to disable warnings

.moth_benchmarks:
    invocation_number: &INVOC_NUM   30
    iteration_numbers:
        fast_vm:      &FAST_VM      1000
        typing_vm:    &TYPING_VM    1000

# definition of benchmark suites
benchmark_suites:

    java-awfy-steady:
        gauge_adapter: RebenchLog
        command: " -cp ../benchmarks/Java/benchmarks.jar Harness %(benchmark)s %(iterations)s "
        iterations: *FAST_VM
        benchmarks: &AWFY_BENCHMARKS
            - DeltaBlue:
                extra_args: 12000
                codespeed_name: "[peak] DeltaBlue"
            - Richards:
                extra_args: 100
                codespeed_name: "[peak] Richards"
            - Json:
                extra_args: 100
                codespeed_name: "[peak] Json"
            - CD:
                extra_args: 250
                codespeed_name: "[peak] CD"
            - Havlak:
                extra_args: 1500
                codespeed_name: "[peak] Havlak"
            
            - Bounce:
                extra_args: 1500
                codespeed_name: "[peak] Bounce"
            - List:
                extra_args: 1500
                codespeed_name: "[peak] List"
            - Mandelbrot:
                extra_args: 500
                codespeed_name: "[peak] Mandelbrot"
            - NBody:
                extra_args: 250000
                codespeed_name: "[peak] NBody"
            - Permute:
                extra_args: 1000
                codespeed_name: "[peak] Permute"
            - Queens:
                extra_args: 1000
                codespeed_name: "[peak] Queens"
            - Sieve:
                extra_args: 3000
                codespeed_name: "[peak] Sieve"
            - Storage:
                extra_args: 1000
                codespeed_name: "[peak] Storage"
            - Towers:
                extra_args: 600
                codespeed_name: "[peak] Towers"

    node-awfy-steady:
        gauge_adapter: RebenchLog
        location: benchmarks/JavaScript
        command: "harness.js %(benchmark)s %(iterations)s "
        iterations: *FAST_VM
        benchmarks: *AWFY_BENCHMARKS
    
    moth-awfy-steady: &MOTH_AWFY
        gauge_adapter: RebenchLog
        command: " harness.grace %(benchmark)s.grace %(iterations)s "
        location: benchmarks/Moth
        iterations: *FAST_VM
        benchmarks: *AWFY_BENCHMARKS
    
    higgs-awfy-steady:
        gauge_adapter: RebenchLog
        location: implementations/Higgs
        command: " ../../../benchmarks/JavaScriptPure/benchmark.js ../../../benchmarks/JavaScriptPure/harness.js ../../../benchmarks/JavaScriptPure/som.js ../../../benchmarks/JavaScriptPure/%(benchmark)s.js "
        # defined in the benchmarks, set to 100
        # variable_values: *FAST_VM
        benchmarks: *AWFY_BENCHMARKS

    moth-typing-steady: &MOTH_TYPING
        gauge_adapter: RebenchLog
        command: " harness.grace %(benchmark)s.grace %(iterations)s "
        location: benchmarks/Moth
        iterations: *TYPING_VM
        benchmarks: &TYPING_BENCHMARKS
            - Snake:
                extra_args: 2000
                codespeed_name: "peak.Snake"
            - Fannkuch:
                extra_args: 10
                codespeed_name: "peak.Fannkuch"
            - PyStone:
                extra_args: 200000
                codespeed_name: "peak.PyStone"
            - Float:
                extra_args: 1000000
                codespeed_name: "peak.Float"
            - Go:
                extra_args: 1000
                codespeed_name: "peak.Go"
            - SpectralNorm:
                extra_args: 500
                codespeed_name: "peak.SpectralNorm"
            - GraphSearch:
                extra_args: 20
                codespeed_name: "peak.GraphSearch"

    moth-typing-stats:
        gauge_adapter: Multivariate
        command: "%(variable)s harness.grace %(benchmark)s.grace %(iterations)s "
        location: benchmarks/Moth
        iterations: 1
        invocations: 1
        variable_values:
          - "-Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=true"
          - "-Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=false"
          - "-Dsom.useOptTypeCheckNode=false -Dsom.useSubtypeTable=true"
          - "-Dsom.useOptTypeCheckNode=false -Dsom.useSubtypeTable=false"
        benchmarks: *TYPING_BENCHMARKS

    moth-awfy-stats:
        gauge_adapter: Multivariate
        command: "%(variable)s harness.grace %(benchmark)s.grace %(iterations)s "
        location: benchmarks/Moth
        iterations: 1
        invocations: 1
        variable_values:
          - "-Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=true"
          - "-Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=false"
          - "-Dsom.useOptTypeCheckNode=false -Dsom.useSubtypeTable=true"
          - "-Dsom.useOptTypeCheckNode=false -Dsom.useSubtypeTable=false"
        benchmarks: *AWFY_BENCHMARKS
    
    type-cost:
        gauge_adapter: RebenchLog
        command: " harness.grace type-cost/%(benchmark)sCount%(input)s.grace %(iterations)s 1000 "
        location: benchmarks/Moth
        iterations: 1000
        input_sizes: [0, 1, 2, 3, 4, 5]
        benchmarks:
          - Check
          - Nest

# VMs have a name and are specified by a path and the binary to be executed
executors:

    Java:
        path: implementations
        build: [./build-java.sh]
        executable: ./Java.sh

    Node:
        path: implementations
        executable: ./Node.sh
    
    "Moth (untyped)":
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -EG "

    "Moth (neither)":
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -EG -tc -Dsom.useOptTypeCheckNode=false -Dsom.useSubtypeTable=false "
    
    "Moth (both)":
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -EG -tc -Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=true "
    
    "Moth (subtype cache)":
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -EG -tc -Dsom.useOptTypeCheckNode=false  -Dsom.useSubtypeTable=true "

    "Moth (optimized node)":
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -EG -tc -Dsom.useOptTypeCheckNode=true  -Dsom.useSubtypeTable=false "

    MothTypedStats:
        path: implementations
        build: [./build-moth.sh]
        executable: ./Moth.sh
        args: " -A -G -tc -Dsom.collectTypeStats=true "

    Higgs:
        path: implementations
        build: [./build-higgs.sh]
        executable: ./Higgs.sh


experiments:
    steady:
        description:
          Experiments for figure 1 in the paper, sec. 4.2 Are We Fast Yet
          This does not yet include the results for Moth. They are produced
          by the typing experiment.
        invocations: *INVOC_NUM
        executions:
            - Java:
                suites:
                    - java-awfy-steady
            - Node:
                suites:
                    - node-awfy-steady
            - Higgs:
                suites: 
                    - higgs-awfy-steady
    typing:
        description:
          Data is used for multiple things.
          For figure 1, sec. 4.2 provides the Moth base line.
          For figure 2, sec. 4.3 Performance of ... Type Checks.
          For figure 3, sec. 4.3 Performance of ... Type Checks.
          For figure 4, sec. 4.4 Effectiveness of Optimizations
        invocations: *INVOC_NUM
        suites:
            - moth-typing-steady
            - moth-awfy-steady
        executions:
            - "Moth (untyped)"
            - "Moth (neither)"
            - "Moth (both)"
            - "Moth (subtype cache)"
            - "Moth (optimized node)"

    stats:
        description:
          Data is used for table 2, Type Test Statistics
        executions:
            - MothTypedStats:
                suites:
                    - moth-typing-stats
                    - moth-awfy-stats
    type-cost:
      description:
        Data is used for figure 5, sec. 4.5 .. Typechecks Almost Free
      invocations: *INVOC_NUM
      suites:
        - type-cost
      executions:
        - "Moth (untyped)"
        - "Moth (neither)"
        - "Moth (both)"
        
